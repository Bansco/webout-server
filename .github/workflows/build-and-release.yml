name: 'Test & Build'

on: 
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:
  release:
    strategy:
      matrix:
        os: [ubuntu-18.04]
        plan:
          - { stack-lts: "16.13", resolver: "--resolver lts-16.13" }

    runs-on: ${{ matrix.os }}

    steps:
    - name: Install OS Packages
      uses: mstksg/get-package@v1
      with:
        apt-get: happy libblas-dev liblapack-dev libgmp-dev

    - uses: actions/checkout@v1

    - name: Setup stack
      uses: mstksg/setup-stack@v1

    - name: Cache ~/.stack
      uses: actions/cache@v2
      with:
        path: ~/.stack
        key: ${{ matrix.os }}-stack-lts-${{ matrix.plan.stack-lts }}-${{ hashFiles('package.yaml') }}-${{ hashFiles('stack.yaml') }}-${{ hashFiles('stack.yaml.lock') }}

    - name: Install dependencies
      run: |
        set -ex
        stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
        set +ex
      env:
        ARGS: ${{ matrix.plan.resolver }}

    - name: Test & Build
      run: |
        set -ex
        stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
        cp $(stack exec -- which webout-server-exe) webout-server-exe
        set +ex
      env:
        ARGS: ${{ matrix.plan.resolver }}

    - name: Get release version
      if: startsWith(github.ref, 'refs/tags/')
      id: get_version
      run: echo ::set-env name=RELEASE_VERSION::$(echo ${GITHUB_REF:10})

    - name: Publish to Registry
      if: startsWith(github.ref, 'refs/tags/')
      uses: elgohr/Publish-Docker-Github-Action@master
      env:
        BINARY_PATH: "webout-server"
      with:
        name: gillchristian/webout-server
        username: gillchristian
        password: ${{ secrets.docker_password }}
        tags: "latest,${{ env.RELEASE_VERSION }}"
        buildargs: BINARY_PATH

    - name: Deploy (webhook)
      if: startsWith(github.ref, 'refs/tags/')
      shell: bash
      run: |
        curl -d '{ "name": "webout" }' \
          -H "Authorization: $TOKEN" \
          -H "Content-Type: application/json" \
          -X POST "$WEBHOOK"
      env:
        WEBHOOK: ${{ secrets.deploy_webhook }}
        TOKEN: ${{ secrets.deploy_token }}
